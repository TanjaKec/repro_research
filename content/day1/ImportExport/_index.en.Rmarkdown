---
date: "2016-04-09T16:50:16+02:00"
title: Import Data to R
output: 
  learnr::tutorial
weight: 8
---

It is the first big hurdle when dealing with data in R. 

You are most likely to have looked at, organised and examined your data files in Excel.

Opening data in R is fairly simply, but organising it for analysis might take some thought and consideration. You'll guess that it is possible to use the **File | Import Dataset** menu option in RStudio to import your data (to learn more see [Importing Data with RStudio](https://support.rstudio.com/hc/en-us/articles/218611977-Importing-Data-with-RStudio)), however weâ€™re going to do it the proper way with a command.

R can import all types of data:

- (Tab, Blank space) Delimited Text
- CSV files
- Excel files
- JSON 
- SAS
- STATA
- MiniTab
- SPSS...

In this section we will show you how to access the most commonly used data types. Once you start playing with the data and wrangling it in the way it suits you for your analytical manipulations you might find it interesting to explore the options for writing data. Here, we are not going to show you how to do it, but rather focus on basic `read` data functionality in R. 

### the R base

The simplest data form is a [text file](https://en.wikipedia.org/wiki/Text_file). Text files can be read by any computer operating system and by almost all different kinds of statistical programs. Saving data as a text file makes your data highly accessible. If you have a text data file you wish to use, you can easily import it with **the R base** functions `read.table()`

This reads a file in table format and creates a data frame from it

```
# Read tabular data into R
df_txt <- read.table(file_name.txt, header = FALSE)
```

There are many packages that let R import all types of data, and we will start by focusing on `CSV` files as they are the most frequent type.

Comma separated files are the most common way to save spreadsheets that donâ€™t require a licenced, usually not free program to open. Importing `CSV` is part of base R and you can use `read.csv()` function to do so. 


##### `read.csv()`

Let us go to <https://data.gov.uk/> UK open data portal. In particular, let us try to access [Leeds libraries](https://data.gov.uk/dataset/4853a980-0c6d-4d83-9daa-d0441b21f6e1/leeds-libraries) and import this data to R.

Instead of downloading it onto our local computers, we will import it to R directly from the web using the link provided.

```{r}
df_csv <- read.csv("https://datamillnorth.org/download/leeds-libraries/cfc9f345-4916-4b74-aa9e-cecc78db9075/library%2520locations.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
head(df_csv, 10)
```
The other way is to download it and save it to your working directory.

Let us download [Leeds libraries csv file](https://datamillnorth.org/download/leeds-libraries/cfc9f345-4916-4b74-aa9e-cecc78db9075/library%2520locations.csv)
Make sure you save the file into your R-Project working directory before you ask R to execute the following

```
df_csv <- read.csv("library locations.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
```

{{% notice info %}}
Run the above code again, but set `stringsAsFactors` argument from the `read.csv` function to `TRUE`. Can you tell the difference between now and before? Why do you think it is useful to use `fileEncoding` argument?
{{% /notice %}}

What do you think about this dataset? ðŸ¤”

#### Using readr::read_csv()

`readr` is a package that reads rectangular data more quickly than **base R** `read.cdv()`. Another difference from the `read.csv()` function is that it assumes characters are strings and not factors by default.

Just so you can see how easy it is to use other packages for importing data into R, the code below illustrates the use of read_csv().

```
## If you don't have readr installed yet, uncomment and run the line below
# install.packages("readr")
library(readr)
df_csv <- read_csv("library locations.csv")
df_csv
```

{{% notice note %}}
Check the `readr::read_delim()` function for more efficient delimited data file reading.
{{% /notice %}}

### Importing Excel files with `readxl`

Importing Excel data files is not straightforward as it might contain multiple sheets. We will focus on using the `readxl` package as it is the most efficient so far.  

{{% notice warning %}}
To access the data from an Excel sheet you canâ€™t just copy and paste the URL for the file. You have to download the file first.
{{% /notice %}}

Let us download an Excel data file from [data.gov.uk](https://data.gov.rs/) about [Greater London Authority Poll Results 2018](https://data.gov.uk/dataset/f1331be1-cef6-4abd-8c08-c463716f83bd/gla-poll-results-2018) from this link:[December 2018 - YouGov GLA poll results](https://data.london.gov.uk/download/gla-poll-results-2018/4fa46414-100c-4727-907f-dc4a185f018c/Dec%25202018%2520-%2520YouGov%2520GLA%2520poll%2520results.xls). 

If you are unable to open the file in Excel to examine how many sheets the file has, try to read the file in R accessing the first one by specifying it in the `read_excel()` function as required. As previously, make sure you save the file into your R-Project working directory before you ask R to execute the following:

```
## If you don't have readxl installed yet, uncomment the line below and run it 
#install.packages("readxl")
library(readxl)
df_xl <- read_excel("Dec 2018 - YouGov GLA poll results", sheet = 1)
```

What do you think?

{{% notice warning %}}
People like to make their Excel spreadsheets look 'pretty' with 'fancy' formatting, which could create difficulty when reading them in R.
{{% /notice %}}

Explore the arguments of the `read_excel()` function, such as the `skip` argument through which you can specify a minimum number of rows to skip before reading anything.

### Importing data using `jsonlite`

When accessing a JSON file in R using the `jsonlite` package you need to point to the file by providing the local path if the file is downloaded or by the URL from where it can be accessed. 

```{r}
## If you don't have readxl installed yet, uncomment the line below and run it 
#install.packages("jsonlite")
library(jsonlite)
my_url <-"https://coronavirus.data.gov.uk/downloads/msoa_data/MSOAs_latest.json"
covid_uk <- fromJSON(my_url)
```

Check the structure of the `covid_uk`! ðŸ˜°

```{r}
str(covid_uk)
names(covid_uk$data)
```

Note that the `covid_uk$data` is a data frame with a list `newCasesByPublishDate` inside as its element.

Ouch! ðŸ˜³ JSON files are not very neat ðŸ˜± They are more than often nested, chained -> youâ€™ve got it: Very Messy! ðŸ˜« So, we will leave it there. ðŸ˜¬ If you do need to learn more about reading JSON files in R you can explore the functionality of the `jsonlite` package further by reading [Getting started with JSON and jsonlite](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html). The blog post [Working with JSON data in very simple way](https://blog.exploratory.io/working-with-json-data-in-very-simple-way-ad7ebcc0bb89) by [Kan Nishida](https://blog.exploratory.io/@kanaugust) provides a great example of how this data format can be used in R. 

### Other data formats

To speed up the reading process of txt, csv data files you can use the `data.table::fread()` function. You should only pass to the function the name of the data file you want to import, and `fread()` will try to work out the appropriate data structure. Check out this blog post [Getting Data From An Online Source](https://www.r-bloggers.com/getting-data-from-an-online-source/) for some more ideas. 

You can use R with appropriate packages to access other data formats. The `haven` package provides functions for importing SAS, SPSS and Stata file formats or you can use the `foreign` package for MiniTab portable worksheet data files. Try to look through the help section of the packages you've been introduced to and discover other options.


## YOUR TURN ðŸ‘‡

1) See if you can find data from <https://data.gov.uk/> about a topic youâ€™re interested in.

2) Have a look at this data set: [General Election Results 2010](https://data.gov.uk/dataset/a879833b-f88f-4597-b082-c74ea71518fd/general-election-results-2010). Think about the questions you can answer based on this data.



-----------------------------
Material is released under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/).

![](/images/cc_by_sa.jpg?width=5pc)